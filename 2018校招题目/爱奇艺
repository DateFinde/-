1、循环数比较
对于任意两个正整数x和k,我们定义repeat(x, k)为将x重复写k次形成的数,例如repeat(1234, 3) = 123412341234,repeat(20,2) = 2020.
牛牛现在给出4个整数x1, k1, x2, k2, 其中v1 = (x1, k1), v2 = (x2, k2),请你来比较v1和v2的大小。

输入描述:
输入包括一行,一行中有4个正整数x1, k1, x2, k2(1 ≤ x1,x2 ≤ 10^9, 1 ≤ k1,k2 ≤ 50),以空格分割
输出描述:
如果v1小于v2输出"Less",v1等于v2输出"Equal",v1大于v2输出"Greater".

输入
1010 3 101010 2
输出
Equal


#include <bits/stdc++.h>
using namespace std;

int main()
{
    int k1,k2;
    string x1,x2;
    cin>>x1>>k1>>x2>>k2;

    string temp=x1;
    for(int i=1;i<k1;++i)
    {
        x1=x1+temp;
    }
    temp=x2;
    for(int i=1;i<k2;++i)
    {
        x2=x2+temp;
    }

    if(x1.size()>x2.size())
    {
        cout<<"Greater"<<endl;
    }
    else if(x1.size()<x2.size())
    {
        cout<<"Less"<<endl;
    }
    else
    {
        if(x1==x2)
        {
            cout<<"Equal"<<endl;
        }
        else if(x1>x2)
        {
            cout<<"Greater"<<endl;
        }
        else
        {
            cout<<"Less"<<endl;
        }
    }

    return 0;
}



2、DNA序列
牛牛又从生物科研工作者那里获得一个任务,这次牛牛需要帮助科研工作者从DNA序列s中找出最短没有出现在DNA序列s中的DNA片段的长度。
例如:s = AGGTCTA序列中包含了所有长度为1的('A','C','G','T')片段,但是长度为2的没有全部包含,例如序列中不包含"AA",所以输出2。

输入描述:
输入包括一个字符串s,字符串长度length(1 ≤ length ≤ 2000),其中只包含'A','C','G','T'这四种字符。
输出描述:
输出一个正整数,即最短没有出现在DNA序列s中的DNA片段的长度。

输入:
AGGTCTA
输出:
2

#include <bits/stdc++.h>
using namespace std;

int main()
{
    string data;
    cin>>data;

    int targetNum=1;
    for(int i=1;i<=data.size();++i)
    {
        targetNum*=4;

        set<string> cntSet;
        for(int j=0;j<data.size();++j)
        {
            if(i+j>=data.size())
            {
                break;
            }

            string subStr=data.substr(j,i);
            cntSet.insert(subStr);
        }

        if(cntSet.size()<targetNum)
        {
            cout<<i;
            break;
        }
    }

    return 0;
}


3、判断题
牛牛参加了一场考试,考试包括n道判断题,每做对一道题获得1分,牛牛考试前完全没有准备,所以考试只能看缘分了,牛牛在考试中一共猜测了t道题目的
答案是"正确",其他的牛牛猜为"错误"。考试结束后牛牛知道实际上n道题中有a个题目的答案应该是"正确",但是牛牛不知道具体是哪些题目,牛牛希望
你能帮助他计算可能获得的最高的考试分数是多少。

输入描述:
输入包括一行,一行中有三个正整数n, t, a(1 ≤ n, t, a ≤ 50), 以空格分割
输出描述:
输出一个整数,表示牛牛可能获得的最高分是多少。

输入
3 1 2
输出
2

#include <bits/stdc++.h>
using namespace std;

int main()
{
    int n,answer,real;
    cin>>n>>answer>>real;

    int sum=0;
    sum+=min(answer,real);
    sum+=n-max(answer,real);

    cout<<sum<<endl;

    return 0;
}


4、删除重复字符
牛牛有一个由小写字母组成的字符串s,在s中可能有一些字母重复出现。比如在"banana"中,字母'a'和字母'n'分别出现了三次和两次。
但是牛牛不喜欢重复。对于同一个字母,他只想保留第一次出现并删除掉后面出现的字母。请帮助牛牛完成对s的操作。

输入描述:
输入包括一个字符串s,s的长度length(1 ≤ length ≤ 1000),s中的每个字符都是小写的英文字母('a' - 'z')
输出描述:
输出一个字符串,表示满足牛牛要求的字符串

输入
banana
输出
ban


#include <bits/stdc++.h>
using namespace std;

int main()
{
    string data;
    getline(cin,data);

    map<char,int> result;
    for(int i=0;i<data.size();++i)
    {
        if(result.find(data[i])==result.end())
        {
            result[data[i]]=1;
        }
        else
        {
            ++result[data[i]];
        }
    }

    for(int i=0;i<data.size();++i)
    {
        if(result[data[i]])
        {
            cout<<data[i];
            result[data[i]]=0;
        }
    }

    return 0;
}


5、空中旅行
牛牛有羊羊有了属于他们自己的飞机。于是他们进行几次连续的飞行。f[i]表示第i次飞行所需的燃油的升数。飞行只能按照f数组所描述的顺序进行。
起初飞机里有s升燃油,为了正常飞行,每次飞行前飞机内燃油量应大于等于此处飞行所需要的燃油量。请帮助他们计算在不进行加油的情况下他们能进行的飞行次数。

输入描述:
输入包括两行,第一行包括两个整数n和s(1 ≤ n ≤ 50, 1 ≤ s ≤ 1000),分别表示计划飞行的次数和飞起初始状态下有的燃油量。
第二行包括n个整数f[i], (1 ≤ f[i] ≤ 1000), 表示每次计划飞行所需要的燃油量。
输出描述:
输出一个整数,表示他们能进行的飞行次数。

输入
7 10
1 2 3 4 5 6 7
输出
4


#include <bits/stdc++.h>
using namespace std;

int main()
{
    int n,s;
    cin>>n>>s;
    int f[n];
    for(int i=0;i<n;++i)
    {
        cin>>f[i];
    }

    int Count=0;
    int index=0;
    while(index<n&&f[index++]<=s)
    {
        Count++;
        s-=f[index-1];
    }
    cout<<Count<<endl;

    return 0;
}


6、回文素数
如果一个整数只能被1和自己整除,就称这个数是素数。
如果一个数正着反着都是一样,就称为这个数是回文数。例如:6, 66, 606, 6666
如果一个数字既是素数也是回文数,就称这个数是回文素数
牛牛现在给定一个区间[L, R],希望你能求出在这个区间内有多少个回文素数。

输入描述:
输入包括一行,一行中有两个整数(1 ≤ L ≤ R ≤ 1000)
输出描述:
输出一个整数,表示区间内回文素数个数。

输入
100 150
输出
2


#include <bits/stdc++.h>
using namespace std;

bool isPrime(int number)
{
    for(int k=2;k<=sqrt(number);++k)
    {
        if(number%k==0)
        {
            return false;
        }
    }
    return true;
}

bool isSymmetry(int number)
{
    string temp=to_string(number);
    for(int i=0;i<temp.size()/2;++i)
    {
        if(temp[i]!=temp[temp.size()-i-1])
        {
            return false;
        }
    }
    return true;
}

int main()
{
    int l,r;
    cin>>l>>r;

    int Count=0;
    for(int i=l+(1-l%2);i<=r;i=i+2)
    {
        if(isSymmetry(i)&&isPrime(i))
        {
            //cout<<to_string(i)<<endl;
            Count++;
        }
    }
    cout<<Count<<endl;

    return 0;
}



7、排序
牛牛有一个长度为n的整数序列,牛牛想对这个序列进行重排为一个非严格升序序列。牛牛比较懒惰,他想移动尽量少的数就完成重排,请你帮他计算一下他最少
需要移动多少个序列中的元素。(当一个元素不在它原来所在的位置,这个元素就是被移动了的)

输入描述:
输入包括两行,第一行一个整数n(1 ≤ n ≤ 50),即序列的长度
第二行n个整数x[i](1 ≤ x[i] ≤ 100),即序列中的每个数
输出描述:
输出一个整数,即最少需要移动的元素个数

输入
3
3 2 1
输出
2


#include <bits/stdc++.h>
using namespace std;

int main()
{
    int n;
    cin>>n;
    int data[n];
    for(int i=0;i<n;++i)
    {
        cin>>data[i];
    }

    int a[n];
    memcpy(a,data,sizeof(data));
    sort(a,a+n);

    int Count=0;
    for(int i=0;i<n;++i)
    {
        if(data[i]!=a[i])
        {
            Count++;
        }
    }
    cout<<Count<<endl;

    return 0;
}


8、字符串价值
有一种有趣的字符串价值计算方式:统计字符串中每种字符出现的次数,然后求所有字符次数的平方和作为字符串的价值
例如: 字符串"abacaba",里面包括4个'a',2个'b',1个'c',于是这个字符串的价值为4 * 4 + 2 * 2 + 1 * 1 = 21
牛牛有一个字符串s,并且允许你从s中移除最多k个字符,你的目标是让得到的字符串的价值最小。

输入描述:
输入包括两行,第一行一个字符串s,字符串s的长度length(1 ≤ length ≤ 50),其中只包含小写字母('a'-'z')。
第二行包含一个整数k(0 ≤ k ≤ length),即允许移除的字符个数。
输出描述:
输出一个整数,表示得到的最小价值

输入
aba
1
输出
2


C++:
#include <bits/stdc++.h>
using namespace std;

int main()
{
    map<char,int> result;
    string data;
    int n;
    cin>>data>>n;

    for(int i=0;i<data.size();++i)
    {
        if(result.find(data[i])!=result.end())
        {
            result[data[i]]++;
        }
        else
        {
            result[data[i]]=1;
        }
    }

    vector<int> number(result.size());
    for(auto it:result)
    {
        number.push_back(it.second);
    }

    int sum=0;
    while(n)
    {
        int max=number[0];
        int index=0;
        for(int i=1;i<number.size();++i)
        {
            if(number[i]>max)
            {
                max=number[i];
                index=i;
            }
        }

        n--;
        number[index]--;
    }
    
    for(int i=0;i<number.size();++i)
    {
        sum+=number[i]*number[i];
    }
    cout<<sum<<endl;

    return 0;
}

Python:
s=list(input())
k=int(input())
Set=set(s)

time=[]
for x in Set:
    temp=s.count(x)
    time.append(temp)
time.sort(reverse=True)

while k>0:
    temp=max(time)
    time[time.index(temp)]-=1
    k-=1

result=0
for i in range(len(time)):
    result+=time[i]**2
print(result)


9、拼凑正方形
牛牛有4根木棍,长度分别为a,b,c,d。羊羊家提供改变木棍长度的服务,如果牛牛支付一个硬币就可以让一根木棍的长度加一或者减一。牛牛需要用
这四根木棍拼凑一个正方形出来,牛牛最少需要支付多少硬币才能让这四根木棍拼凑出正方形。

输入描述:
输入包括一行,四个整数a,b,c,d(1 ≤ a,b,c,d ≤ 10^6), 以空格分割
输出描述:
输出一个整数,表示牛牛最少需要支付的硬币

输入
4 1 5 4
输出
4

#include <bits/stdc++.h>
using namespace std;

int main()
{
    int data[4];
    for(int i=0;i<4;++i)
    {
        cin>>data[i];
    }
    sort(data,data+4);

    int Count=9999999;
    for(int i=data[0];i<=data[3];++i)
    {
        int temp=0;
        for(int j=0;j<4;++j)
        {
            temp+=abs(i-data[j]);
        }
        if(temp<Count)
        {
            Count=temp;
        }
    }
    cout<<Count<<endl;

    return 0;
}


10、区间表达
牛牛的老师给出了一个区间的定义:对于x ≤ y,[x, y]表示x到y之间(包括x和y)的所有连续整数集合。例如[3,3] = {3}, [4,7] = {4,5,6,7}.牛牛
现在有一个长度为n的递增序列,牛牛想知道需要多少个区间并起来等于这个序列。
例如:
{1,2,3,4,5,6,7,8,9,10}最少只需要[1,10]这一个区间
{1,3,5,6,7}最少只需要[1,1],[3,3],[5,7]这三个区间

输入描述:
输入包括两行,第一行一个整数n(1 ≤ n ≤ 50),
第二行n个整数a[i](1 ≤ a[i] ≤ 50),表示牛牛的序列,保证序列是递增的。
输出描述:
输出一个整数,表示最少区间个数。

输入
5
1 3 5 6 7
输出
3

n=int(input())
data=[int(x) for x in input().split(' ')]

num=1
for i in range(n-1):
    if data[i+1]!=data[i]+1:
        num+=1
print(num)


11、数字游戏
牛牛举办了一场数字游戏,有n个玩家参加这个游戏,游戏开始每个玩家选定一个数,然后将这个数写在纸上(十进制数,无前缀零),然后接下来对于每一个
数字将其数位按照非递减顺序排列,得到新的数,新数的前缀零将被忽略。得到最大数字的玩家赢得这个游戏。

输入描述:
输入包括两行,第一行包括一个整数n(1 ≤ n ≤ 50),即玩家的人数
第二行n个整数x[i](0 ≤ x[i] ≤ 100000),即每个玩家写下的整数。
输出描述:
输出一个整数,表示赢得游戏的那个玩家获得的最大数字是多少。

输入
3
9638 8210 331
输出
3689

#include <bits/stdc++.h>
using namespace std;

int main()
{
    int n;
    cin>>n;
    int number[n];

    for(int i=0;i<n;++i)
    {
        int x;
        cin>>x;

        vector<int> temp;
        int m=x;
        while(m)
        {
            temp.push_back(m%10);
            m/=10;
        }
        sort(temp.begin(),temp.end());

        for(int j=0;j<temp.size();++j)
        {
            m=10*m+temp[j];
        }
        number[i]=m;
    }

    int result=number[0];
    for(int i=1;i<n;++i)
    {
        if(number[i]>result)
        {
            result=number[i];
        }
    }
    cout<<result<<endl;

    return 0;
}


12、红和绿
牛牛有一些排成一行的正方形。每个正方形已经被染成红色或者绿色。牛牛现在可以选择任意一个正方形然后用这两种颜色的任意一种进行染色,这个正方形
的颜色将会被覆盖。牛牛的目标是在完成染色之后,每个红色R都比每个绿色G距离最左侧近。牛牛想知道他最少需要涂染几个正方形。
如样例所示: s = RGRGR
我们涂染之后变成RRRGG满足要求了,涂染的个数为2,没有比这个更好的涂染方案。

输入描述:
输入包括一个字符串s,字符串s长度length(1 ≤ length ≤ 50),其中只包括'R'或者'G',分别表示红色和绿色。
输出描述:
输出一个整数,表示牛牛最少需要涂染的正方形数量

输入
RGRGR
输出
2


//AC为90%，好像有一种情况样例不能通过：GG..GR...RR
#include <bits/stdc++.h>
using namespace std;

int main()
{
    string word;
    cin>>word;
    int redNumber=0;
    int greenNumber=0;
    for(int i=0;i<word.size();++i)
    {
        if(word[i]=='R')
        {
            ++redNumber;
        }
    }
    greenNumber=word.size()-redNumber;


    int Count=word.size()+1;
    int redLeft=0;
    for(int i=0;i<word.size();++i)
    {
        if(word[i]=='R')
        {
            ++redLeft;
        }
        int greenLeft=i+1-redLeft;
        int redRight=redNumber-redLeft;
        if(greenLeft+redRight<Count)
        {
            Count=greenLeft+redRight;
        }
    }
    cout<<Count<<endl;

    return 0;
}


13、拼凑三角形
牛牛手中有三根木棍,长度分别是a,b,c。牛牛可以把任一一根木棍长度削短,牛牛的目标是让这三根木棍构成一个三角形,并且牛牛还希望这个三角形的周长越大越好。

输入描述:
输入包括一行,一行中有正整数a, b, c(1 ≤ a, b, c ≤ 100), 以空格分割
输出描述:
输出一个整数,表示能拼凑出的周长最大的三角形。

输入
1 2 3
输出
5

#include <bits/stdc++.h>
using namespace std;

bool isTria(int num1,int num2,int num3)
{
    if(num1+num2>num3&&num1+num3>num2&&num2+num3>num1)
    {
        return true;
    }
    return false;
}

int main()
{
    int a,b,c;
    cin>>a>>b>>c;
    while(!isTria(a,b,c))
    {
        if(a>b&&a>c)
        {
            a--;
        }
        else if(b>a&&b>c)
        {
            b--;
        }
        else if(c>a&&c>b)
        {
            c--;
        }
    }
    cout<<a+b+c<<endl;

    return 0;
}


14、青草游戏
牛牛和羊羊都很喜欢青草。今天他们决定玩青草游戏。
最初有一个装有n份青草的箱子,牛牛和羊羊依次进行,牛牛先开始。在每个回合中,每个玩家必须吃一些箱子中的青草,所吃的青草份数必须是4的x次幂,
比如1,4,16,64等等。不能在箱子中吃到有效份数青草的玩家落败。假定牛牛和羊羊都是按照最佳方法进行游戏,请输出胜利者的名字。

输入描述:
输入包括t+1行。
第一行包括一个整数t(1 ≤ t ≤ 100),表示情况数.
接下来t行每行一个n(1 ≤ n ≤ 10^9),表示青草份数
输出描述:
对于每一个n,如果牛牛胜利输出"niu",如果羊羊胜利输出"yang"。

输入
3
1
2
3
输出
niu
yang
niu


#include <bits/stdc++.h>
using namespace std;

int main()
{
    int t;
    cin>>t;
    while(t)
    {
        int n;
        cin>>n;
        if(n%5==0||n%5==2)
        {
            cout<<"yang"<<endl;
        }
        else
        {
            cout<<"niu"<<endl;
        }

        --t;
    }

    return 0;
}


15、平方串
如果一个字符串S是由两个字符串T连接而成,即S = T + T, 我们就称S叫做平方串,例如"","aabaab","xxxx"都是平方串.
牛牛现在有一个字符串s,请你帮助牛牛从s中移除尽量少的字符,让剩下的字符串是一个平方串。换句话说,就是找出s的最长子序列并且这个子序列构成一个平方串。

输入描述:
输入一个字符串s,字符串长度length(1 ≤ length ≤ 50),字符串只包括小写字符。
输出描述:
输出一个正整数,即满足要求的平方串的长度。

输入
frankfurt
输出
4


#include <bits/stdc++.h>
using namespace std;

int Array[51][51]={0};
int lcs(string str1,string str2)
{
    int len1=str1.size();
    int len2=str2.size();

    for(int i=0;i<len1;++i)
    {
        for(int j=0;j<len2;++j)
        {
            if(str1[i]==str2[j])
            {
                Array[i+1][j+1]=Array[i][j]+1;
            }
            else
            {
                Array[i+1][j+1]=max(Array[i][j+1],Array[i+1][j]);
            }
        }
    }
    return Array[len1][len2];
}

int main()
{
    string data;
    cin>>data;
    int result=0;
    for(int i=0;i<data.size();++i)
    {
        string str1=data.substr(0,i+1);
        string str2=data.substr(i+1,data.size()-i-1);

        result=max(result,lcs(str1,str2));
    }
    cout<<2*result<<endl;

    return 0;
}


16、牛奶编号
牛牛养了n只奶牛,牛牛想给每只奶牛编号,这样就可以轻而易举地分辨它们了。 每个奶牛对于数字都有自己的喜好,第i只奶牛想要一个1和x[i]之间
的整数(其中包含1和x[i])。
牛牛需要满足所有奶牛的喜好,请帮助牛牛计算牛牛有多少种给奶牛编号的方法,输出符合要求的编号方法总数。

输入描述:
输入包括两行,第一行一个整数n(1 ≤ n ≤ 50),表示奶牛的数量 第二行为n个整数x[i](1 ≤ x[i] ≤ 1000)
输出描述:
输出一个整数,表示牛牛在满足所有奶牛的喜好上编号的方法数。因为答案可能很大,输出方法数对1,000,000,007的模。

输入
4
4 4 4 4
输出
24

#include <bits/stdc++.h>
using namespace std;

int main()
{
    int n;
    cin>>n;
    vector<int> data(n);
    for(int i=0;i<n;++i)
    {
        cin>>data[i];
    }
    sort(data.begin(),data.end());

    long long Sum=1;
    for(int i=0;i<n;++i)
    {
        Sum=Sum%1000000007*(data[i]-i);
    }
    cout<<Sum%1000000007<<endl;

    return 0;
}


17、括号匹配深度
一个合法的括号匹配序列有以下定义:
1、空串""是一个合法的括号匹配序列
2、如果"X"和"Y"都是合法的括号匹配序列,"XY"也是一个合法的括号匹配序列
3、如果"X"是一个合法的括号匹配序列,那么"(X)"也是一个合法的括号匹配序列
4、每个合法的括号序列都可以由以上规则生成。
例如: "","()","()()","((()))"都是合法的括号序列
对于一个合法的括号序列我们又有以下定义它的深度:
1、空串""的深度是0
2、如果字符串"X"的深度是x,字符串"Y"的深度是y,那么字符串"XY"的深度为max(x,y) 3、如果"X"的深度是x,那么字符串"(X)"的深度是x+1
例如: "()()()"的深度是1,"((()))"的深度是3。牛牛现在给你一个合法的括号序列,需要你计算出其深度。

输入描述:
输入包括一个合法的括号序列s,s长度length(2 ≤ length ≤ 50),序列中只包含'('和')'。
输出描述:
输出一个正整数,即这个序列的深度。

输入
(())
输出
2


#include <bits/stdc++.h>
using namespace std;

int main()
{
    string data;
    cin>>data;
    if(data.size()==0)
    {
        cout<<1<<endl;
        return 0;
    }

    int Count=0;
    int depth=0;
    for(int i=0;i<data.size();++i)
    {
        if(data[i]=='(')
        {
            ++depth;
        }
        else
        {
            --depth;
        }
        Count=max(depth,Count);
    }
    cout<<Count<<endl;

    return 0;
}


18、冒泡排序
牛牛学习了冒泡排序,并写下以下冒泡排序的伪代码,注意牛牛排序的数组a是从下标0开始的。
BubbleSort(a):
    Repeat length(a)-1 times:
        For every i from 0 to length(a) - 2:
            If a[i] > a[i+1] then:
                 Swap a[i] and a[i+1]
牛牛现在要使用上述算法对一个数组A排序。
在排序前牛牛允许执行最多k次特定操作(可以不使用完),每次特定操作选择一个连续子数组,然后对其进行翻转,并且k次特定操作选择的子数组不相交。
例如A = {1, 2, 3, 4, 5, 6, 7}, k = 1,如果牛牛选择的子数组是[2,4](注意下标从0开始),那么翻转之后的数组变为A = {1, 2, 5, 4, 3, 6, 7}。
牛牛知道冒泡排序的效率一定程度上取决于Swap操作次数,牛牛想知道对于一个数组A在进行k次特定操作之后,再进行上述冒泡排序最少的Swap操作次数是多少?

输入描述:
输入包括两行,第一行包括两个正整数n和k(2 ≤ n ≤ 50, 1 ≤ k ≤ 50),表示数组的长度和允许最多的特定操作次数。
第二行n个正整数A[i](1 ≤ A[i] ≤ 1000),表示数组内的元素,以空格分割。
输出描述:
输出一个整数,表示在执行最多k次特定操作之后,对数组进行上述冒泡排序需要的Swap操作次数。

输入
3 2
2 3 1
输出
1


#include <bits/stdc++.h>
using namespace std;


int reverse_pair(vector<int> arr, int left, int right, bool reverse_flag)
{
	int ans = 0;
	if (reverse_flag) reverse(arr.begin() + left, arr.begin() + right + 1);
	for (int i = left; i <= right; ++i) {
		for (int j = i + 1; j <= right; ++j) {
			if (arr[i] > arr[j]) ++ans;
		}
	}
 
	return ans;
}
 
int main()
{
	int n, k;
	cin >> n >> k;
	vector<int> arr(n + 1, 0);
	vector<vector<int>> dp(n + 1, vector<int>(k + 1, 0));
 
	for (int i = 1; i <= n; ++i) cin >> arr[i];
 
	for (int i = 2; i <= n; ++i) {
		for (int j = 1; j <= k; ++j) {
			int temp = -1;
			for (int t = 1; t <= i; ++t) {
				int diff = reverse_pair(arr, t, i, false) -
					reverse_pair(arr, t, i, true);
				if (diff < 0) diff = 0;
				temp = max(temp, dp[t - 1][j - 1] + diff);
			}
			dp[i][j] = max(dp[i - 1][j], temp);
		}
	}
 
	cout << reverse_pair(arr, 1, n, false) - dp[n][k] << endl;
	
	return 0;
}


19、最后一位
牛牛选择了一个正整数X,然后把它写在黑板上。然后每一天他会擦掉当前数字的最后一位,直到他擦掉所有数位。 在整个过程中,牛牛会把所有在黑板上
出现过的数字记录下来,然后求出他们的总和sum.
例如X = 509, 在黑板上出现过的数字依次是509, 50, 5, 他们的和就是564.
牛牛现在给出一个sum,牛牛想让你求出一个正整数X经过上述过程的结果是sum.

输入描述:
输入包括正整数sum(1 ≤ sum ≤ 10^18)
输出描述:
输出一个正整数,即满足条件的X,如果没有这样的X,输出-1。

输入
564
输出
509


#include <bits/stdc++.h>
using namespace std;

int main()
{
	long long sum;
	cin>>sum;
	long long x=-1;

	long long l=0;
	long long r=sum;
	while(l<=r)
    {
        long long mid=(l+r)/2;
        long long result=0;
        long long temp=mid;
        while(temp)
        {
            result+=temp;
            temp/=10;
        }

        if(result==sum)
        {
            x=mid;
            break;
        }
        else if(result>sum)
        {
            r=mid-1;
        }
        else
        {
            l=mid+1;
        }
    }
    cout<<x<<endl;

	return 0;
}



20、缺失的括号
一个完整的括号字符串定义规则如下:
1、空字符串是完整的。
2、如果s是完整的字符串，那么(s)也是完整的。
3、如果s和t是完整的字符串，将它们连接起来形成的st也是完整的。
例如，"(()())", ""和"(())()"是完整的括号字符串，"())(", "()(" 和 ")"是不完整的括号字符串。
牛牛有一个括号字符串s,现在需要在其中任意位置尽量少地添加括号,将其转化为一个完整的括号字符串。请问牛牛至少需要添加多少个括号。

输入描述:
输入包括一行,一个括号序列s,序列长度length(1 ≤ length ≤ 50).
s中每个字符都是左括号或者右括号,即'('或者')'.
输出描述:
输出一个整数,表示最少需要添加的括号数

输入
(()(()
输出
2


#include <bits/stdc++.h>
using namespace std;

int main()
{
	string data;
	cin>>data;
	int left=0;
	int right=0;

	for(int i=0;i<data.size();++i)
    {
        if(data[i]=='(')
        {
            ++left;
        }
        else
        {
            if(left>0)
            {
                --left;
            }
            else
            {
                ++right;
            }
        }
    }
    cout<<left+right<<endl;

	return 0;
}


21、幸运子序列
牛牛得到一个长度为n的整数序列V,牛牛定义一段连续子序列的幸运值为这段子序列中最大值和次大值的异或值(次大值是严格的次大)。牛牛现在需要
求出序列V的所有连续子序列中幸运值最大是多少。请你帮帮牛牛吧。

输入描述:
第一行一个整数n,即序列的长度。(2<= n <= 100000)
第二行n个数，依次表示这个序列每个数值V[i], (1 ≤ V[i] ≤ 10^8)且保证V[1]到V[n]中至少存在不同的两个值.
输出描述:
输出一个整数,即最大的幸运值

输入
5
5 2 1 4 3
输出
7


#include <bits/stdc++.h>
using namespace std;

int main()
{
	int n;
	cin>>n;
	vector<int> data;
	for(int i=0;i<n;++i)
    {
        int temp;
        cin>>temp;
        data.push_back(temp);
    }

    int result=0;
    for(int i=0;i<n;++i)
    {
        for(int j=i-1;j>=0;--j)
        {
            if(data[i]<data[j])
            {
                int temp=data[i]^data[j];
                if(temp>result)
                {
                    result=temp;
                }
                break;
            }            
        }

        for(int j=i+1;j<n;++j)
        {
            if(data[i]<data[j])
            {
                int temp=data[i]^data[j];
                if(temp>result)
                {
                    result=temp;
                }
                break;
            }            
        }
    }
    cout<<result<<endl;

	return 0;
}



22、无聊的牛牛和羊羊
牛牛和羊羊非常无聊.他们有n + m个共同朋友,他们中有n个是无聊的,m个是不无聊的。每个小时牛牛和羊羊随机选择两个不同的
朋友A和B.(如果存在多种可能的pair(A, B),任意一个被选到的概率相同。),然后牛牛会和朋友A进行交谈,羊羊会和朋友B进行交
谈。在交谈之后,如果被选择的朋友之前不是无聊会变得无聊。现在你需要计算让所有朋友变得无聊所需要的时间的期望值。
输入描述:
输入包括两个整数n 和 m(1 ≤ n, m ≤ 50)
输出描述:
输出一个实数,表示需要时间的期望值,四舍五入保留一位小数。

输入
2 1
输出
1.5


#include <bits/stdc++.h>
using namespace std;

double flag[101][101];
bool mark[101][101];
double getDepth(int n,int m)
{
    if(mark[n][m])
    {
        return flag[n][m];
    }
    mark[n][m]=true;
    if(m<=0)
    {
        return 0;
    }

    int total=m+n;
    double p1=1.0*(n*(n-1))/(total*(total-1));
    double p2=1.0*(2*m*n)/(total*(total-1));
    double p3=1.0*(m*(m-1))/(total*(total-1));
    flag[n][m]=1.0*(1+p2*getDepth(n+1,m-1)+p3*getDepth(n+2,m-2))/(1-p1);

    return flag[n][m];
}

int main()
{
	int n,m;
	cin>>n>>m;

	double result=getDepth(n,m);
    int temp=10*result>0?10*result+0.5:10*result-0.5;

    printf("%.1f\n",temp/10.0);
	return 0;
}

