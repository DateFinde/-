1、最大乘积
给定一个无序数组，包含正数、负数和0，要求从中找出3个数的乘积，使得乘积最大，要求时间复杂度：O(n)，空间复杂度：O(1)

输入描述:
第一行是数组大小n，第二行是无序整数数组A[n]
输出描述:
满足条件的最大乘积

输入例子1:
4
3 4 1 2
输出例子1:
24

#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
int main()
{
    int n;
    cin>>n;
    vector<long long> data(n,0);
    for(int i=0;i<n;++i)
    {
        cin>>data[i];
    }
    sort(data.begin(),data.end());
    long long k=0;
    k=data[0]*data[1]*data[n-1];
    long long m=data[n-1]*data[n-2]*data[n-3];
    long long res=k>m?k:m;
    cout<<res<<endl;
    return 0;
}


2、大整数相乘
有两个用字符串表示的非常大的大整数,算出他们的乘积，也是用字符串表示。不能用系统自带的大整数类型。

输入描述:
空格分隔的两个字符串，代表输入的两个大整数
输出描述:
输入的乘积，用字符串表示

输入例子1:
72106547548473106236 982161082972751393
输出例子1:
70820244829634538040848656466105986748

#include <bits/stdc++.h>
using namespace std;

int main()
{
    vector<int> data1,data2;
    string word[2];
    for(int i=0;i<2;++i)
    {
        cin>>word[i];
    }
    //字符转换为数值
    for(int i=word[0].size()-1;i>=0;--i)
    {
        data1.push_back(word[0][i]-'0');
    }
    for(int i=word[1].size()-1;i>=0;--i)
    {
        data2.push_back(word[1][i]-'0');
    }

    //计算每一位的数值
    vector<int> result(data1.size()+data2.size(),0);
    for(int i=0;i<data1.size();++i)
    {
        for(int j=0;j<data2.size();++j)
        {
            result[i+j]+=data1[i]*data2[j];
        }
    }
    for(int i=0;i<result.size()-1;++i)
    {
        result[i+1]+=result[i]/10;
        result[i]=result[i]%10;
    }

    string output;
    int len=data1.size()+data2.size();
    //最高为不一定包含数值
    while(result[len-1]==0)
    {
        len--;
    }
    for(int i=len-1;i>=0;--i)
    {
        output+=(result[i]+'0');
    }
    cout<<output<<endl;

    return 0;

}


 3、六一儿童节
 六一儿童节，老师带了很多好吃的巧克力到幼儿园。每块巧克力j的重量为w[j]，对于每个小朋友i，当他分到的巧克力大小达到h[i] (即w[j]>=h[i])，
 他才会上去表演节目。老师的目标是将巧克力分发给孩子们，使得最多的小孩上台表演。可以保证每个w[i]> 0且不能将多块巧克力分给一个孩子或将一
 块分给多个孩子。

输入描述:
第一行：n，表示h数组元素个数
第二行：n个h数组元素
第三行：m，表示w数组元素个数
第四行：m个w数组元素
输出描述:
上台表演学生人数

输入例子1:
3
2 2 3
2
3 1 
输出例子1:
1


#include <bits/stdc++.h>
using namespace std;

int main()
{
    int n,m;
    cin>>n;
    vector<int> h(n);
    for(int i=0;i<n;++i)
    {
        cin>>h[i];
    }
    cin>>m;
    vector<int> weight(m);
    for(int i=0;i<m;++i)
    {
        cin>>weight[i];
    }
    sort(h.begin(),h.end());
    sort(weight.begin(),weight.end());

    int count=0;
    for(int i=0,j=0;i<m&&j<n;++i)
    {
        if(weight[i]>=h[j])
        {
            count++;
            ++j;
        }
    }
    cout<<count<<endl;

    return 0;

}



4、列表补全
在商城的某个位置有一个商品列表，该列表是由L1、L2两个子列表拼接而成。当用户浏览并翻页时，需要从列表L1、L2中获取商品进行展示。展示规则如下：
1. 用户可以进行多次翻页，用offset表示用户在之前页面已经浏览的商品数量，比如offset为4，表示用户已经看了4个商品
2. n表示当前页面需要展示的商品数量
3. 展示商品时首先使用列表L1，如果列表L1长度不够，再从列表L2中选取商品
4. 从列表L2中补全商品时，也可能存在数量不足的情况
请根据上述规则，计算列表L1和L2中哪些商品在当前页面被展示了

输入描述:
每个测试输入包含1个测试用例，包含四个整数，分别表示偏移量offset、元素数量n，列表L1的长度l1，列表L2的长度l2。
输出描述:
在一行内输出四个整数分别表示L1和L2的区间start1，end1，start2，end2，每个数字之间有一个空格。
注意，区间段使用半开半闭区间表示，即包含起点，不包含终点。如果某个列表的区间为空，使用[0, 0)表示，如果某个列表被跳过，使用[len, len)表示，
len表示列表的长度。

输入
2 4 4 4
1 2 4 4
4 1 3 3
输出
2 4 0 2
1 3 0 0
3 3 1 2


#include <bits/stdc++.h>
using namespace std;

int main()
{
    int offset,n,l1,l2;
    cin>>offset>>n>>l1>>l2;
    int start1,end1,start2,end2;
    if(offset>=l1)
    {
        start1=end1=l1;
        offset-=l1;
    }
    else
    {
        start1=offset;
        end1=l1-offset>=n?offset+n:l1;
        offset=0;
        n-=end1-start1;
    }

    if(offset>=l2)
    {
        start2=end2=l2;
    }
    else
    {
        start2=offset;
        end2=l2-offset>=n?offset+n:l2;
    }
    printf("%d %d %d %d\n",start1,end1,start2,end2);

	return 0;
}




5、数三角形
给出平面上的n个点，现在需要你求出，在这n个点里选3个点能构成一个三角形的方案有几种。

输入描述:
第一行包含一个正整数n，表示平面上有n个点（n <= 100)
第2行到第n + 1行，每行有两个整数，表示这个点的x坐标和y坐标。(所有坐标的绝对值小于等于100，且保证所有坐标不同）
输出描述:
输出一个数，表示能构成三角形的方案数。

输入
4
0 0
0 1
1 0
1 1
输出
4


#include <bits/stdc++.h>
using namespace std;
struct node
{
    int x;
    int y;
};

int main()
{
    int n;
    cin>>n;
    vector<node> data;
    for(int i=0;i<n;++i)
    {
        node temp;
        cin>>temp.x>>temp.y;
        data.push_back(temp);
    }

    int Count=0;
    for(int i=0;i<data.size();++i)
    {
        for(int j=i+1;j<data.size();++j)
        {
            for(int k=j+1;k<data.size();++k)
            {
                if((data[k].x-data[i].x)*(data[j].y-data[i].y)!=(data[k].y-data[i].y)*(data[j].x-data[i].x))
                {
                    ++Count;
                }
            }
        }
    }
    cout<<Count<<endl;

	return 0;
}



6、小熊吃糖
有n只小熊，他们有着各不相同的战斗力。每次他们吃糖时，会按照战斗力来排，战斗力高的小熊拥有优先选择权。前面的小熊吃饱了，后面的小熊才能吃。
每只小熊有一个饥饿值，每次进食的时候，小熊们会选择最大的能填饱自己当前饥饿值的那颗糖来吃，可能吃完没饱会重复上述过程，但不会选择吃撑。
现在给出n只小熊的战斗力和饥饿值，并且给出m颗糖能填饱的饥饿值。
求所有小熊进食完之后，每只小熊剩余的饥饿值。

输入描述:
第一行两个正整数n和m，分别表示小熊数量和糖的数量。（n <= 10, m <= 100）
第二行m个正整数，每个表示着颗糖能填充的饥饿值。
接下来的n行，每行2个正整数，分别代表每只小熊的战斗力和当前饥饿值。
题目中所有输入的数值小于等于100。
输出描述:
输出n行，每行一个整数，代表每只小熊剩余的饥饿值。

输入
2 5
5 6 10 20 30
4 34
3 35
输出
4
0


#include <bits/stdc++.h>
using namespace std;

struct node1
{
    int power;
    int need;
    int id;
};

struct node2
{
    int weight;
    bool flag;
};

bool cmp1(node1 num1,node1 num2)
{
    return num1.power>num2.power;
}

bool cmp2(node2 num1,node2 num2)
{
    return num1.weight>num2.weight;
}

bool cmp3(node1 num1,node1 num2)
{
    return num1.id<num2.id;
}

int main()
{
    int n,m;
    cin>>n>>m;

    vector<node2> Weight(m);
    for(int i=0;i<m;++i)
    {
        cin>>Weight[i].weight;
        Weight[i].flag=true;
    }
    sort(Weight.begin(),Weight.end(),cmp2);

    vector<node1> number(n);
    for(int i=0;i<n;++i)
    {
        cin>>number[i].power>>number[i].need;
        number[i].id=i;
    }
    sort(number.begin(),number.end(),cmp1);

    for(int i=0;i<n;++i)
    {
        for(int j=0;j<m;++j)
        {
            if(number[i].need>=Weight[j].weight&&Weight[j].flag)
            {
                number[i].need-=Weight[j].weight;
                Weight[j].flag=false;
            }
        }
    }
    sort(number.begin(),number.end(),cmp3);

    for(int i=0;i<n;++i)
    {
        cout<<number[i].need<<endl;
    }

    return 0;
}



7、
