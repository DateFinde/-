给定一个单链表，请编写程序将链表元素进行分类排列，使得所有负值元素都排在非负值元素的前面，而 [0, K] 区间内的元素都排在大于 K 的元素前面。但每一
类内部元素的顺序是不能改变的。例如：给定链表为 18→7→-4→0→5→-6→10→11→-2，K 为 10，则输出应该为 -4→-6→-2→7→0→5→10→18→11。

输入格式：
每个输入包含一个测试用例。每个测试用例第 1 行给出：第 1 个结点的地址；结点总个数，即正整数N (≤10^5)；以及正整数K (≤10^3)。结点的地址是 5 位非
负整数，NULL 地址用 −1 表示。

接下来有 N 行，每行格式为：

Address Data Next
其中 Address 是结点地址；Data 是该结点保存的数据，为 [−10^5,10^5] 区间内的整数；Next 是下一结点的地址。题目保证给出的链表不为空。

输出格式：
对每个测试用例，按链表从头到尾的顺序输出重排后的结果链表，其上每个结点占一行，格式与输入相同。

输入样例：
00100 9 10
23333 10 27777
00000 0 99999
00100 18 12309
68237 -6 23333
33218 -4 00000
48652 -2 -1
99999 5 68237
27777 11 48652
12309 7 33218
输出样例：
33218 -4 68237
68237 -6 48652
48652 -2 12309
12309 7 00000
00000 0 99999
99999 5 23333
23333 10 00100
00100 18 27777
27777 11 -1


#include <set>
#include <map>
#include <deque> 
#include <list>
#include <bitset>
#include <stack>
#include <queue>
#include <vector>
#include <cstring>
#include <algorithm>
#include <assert.h>

#include <iostream>
#include <cmath>
#include <ctime>
#include <cctype>
#include <cstdlib>
#include <iomanip>
using namespace std;

struct node{
	int data;
	int next;
};/*
int cmp(node a,node b)
{
	if(a.g!=b.g){
		return a.g>b.g;
	}
	else if(a.g==b.g){
		return a.name<b.name;
	}
}*/

int main(int argc, char** argv) {
	int start,n,k;
	int address;
	cin>>start>>n>>k;
	map<int,node> number;
	for(int i=0;i<n;++i){
		cin>>address;
		cin>>number[address].data>>number[address].next;
	}
	
	int flag=start;
	vector<int> result[3];
	while(flag!=-1){
		if(number[flag].data<0){
			result[0].push_back(flag);
		}
		else if(number[flag].data>k){
			result[2].push_back(flag);
		}
		else{
			result[1].push_back(flag);
		}
		flag=number[flag].next;
	}
	
	int time=0;
	for(int i=0;i<3;++i){
		for(int j=0;j<result[i].size();++j){
			if(time==0){
				time=1;
				printf("%05d %d ",result[i][j],number[result[i][j]].data);
			}
			else{
				printf("%05d\n%05d %d ",result[i][j],result[i][j],number[result[i][j]].data);
			}
		}
	}
	cout<<-1;
	return 0;
}
