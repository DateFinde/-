给定一个常数 K 以及一个单链表 L，请编写程序将 L 中每 K 个结点反转。例如：给定 L 为 1→2→3→4→5→6，K 为 3，则输出应该为 3→2→1→6→5→4；
如果 K 为 4，则输出应该为 4→3→2→1→5→6，即最后不到 K 个元素不反转。

输入格式：
每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 N (≤10^5)、以及正整数 K (≤N)，即要求反转的子链结点的个数。
结点的地址是 5 位非负整数，NULL 地址用 −1 表示。

接下来有 N 行，每行格式为：

Address Data Next
其中 Address 是结点地址，Data 是该结点保存的整数数据，Next 是下一结点的地址。

输出格式：
对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。

输入样例：
00100 6 4
00000 4 99999
00100 1 12309
68237 6 -1
33218 3 00000
99999 5 68237
12309 2 33218
输出样例：
00000 4 33218
33218 3 12309
12309 2 00100
00100 1 99999
99999 5 68237
68237 6 -1



#include <set>
#include <map>
#include <deque> 
#include <list>
#include <bitset>
#include <stack>
#include <queue>
#include <vector>
#include <cstring>
#include <algorithm>
#include <assert.h>

#include <iostream>
#include <cmath>
#include <ctime>
#include <cctype>
#include <cstdlib>
#include <iomanip>
using namespace std;
struct node{
	int address;
	int data;
	int next;
}n0;
int main(int argc, char** argv) {
	int start,n,k;
	cin>>start>>n>>k;
	
	//struct node n;
	vector<node> result;
	vector<node> Data;
	node addr[100000];
	
	for(int i=0;i<n;++i){
		cin>>n0.address>>n0.data>>n0.next;
		addr[n0.address]=n0;
	}
	
	int temp=start;
	while(temp!=-1){
		Data.push_back(addr[temp]);
		temp=addr[temp].next;
	}
	
	int size=Data.size();
	temp=k-1;
	while(temp<size){
		for(int i=temp;i>temp-k;--i){
			result.push_back(Data[i]);
		}
		temp+=k;
	}
	
	for(int i=temp-k+1;i<size;++i){
		result.push_back(Data[i]);
	}
	for(int i=0;i<size-1;++i){
		result[i].next=result[i+1].address;
		printf("%05d %d %05d\n",result[i].address,result[i].data,result[i].next);
	}
	printf("%05d %d %d\n",result[size-1].address,result[size-1].data,-1);
	
	return 0;
}








