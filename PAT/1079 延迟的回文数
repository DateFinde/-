给定一个 k+1 位的正整数 N，写成 ak⋯a1a0 的形式，其中对所有 i 有 0≤ai<10 且 ak >0。N 被称为一个回文数，当且仅当对所有 i 有 ai=a(k−i)。
零也被定义为一个回文数。

非回文数也可以通过一系列操作变出回文数。首先将该数字逆转，再将逆转数与该数相加，如果和还不是一个回文数，就重复这个逆转再相加的操作，直到一
个回文数出现。如果一个非回文数可以变出回文数，就称这个数为延迟的回文数。（定义翻译自 https://en.wikipedia.org/wiki/Palindromic_number ）

给定任意一个正整数，本题要求你找到其变出的那个回文数。

输入格式：
输入在一行中给出一个不超过1000位的正整数。

输出格式：
对给定的整数，一行一行输出其变出回文数的过程。每行格式如下

A + B = C
其中 A 是原始的数字，B 是 A 的逆转数，C 是它们的和。A 从输入的整数开始。重复操作直到 C 在 10 步以内变成回文数，这时在一行中输出 C is a 
palindromic number.；或者如果 10 步都没能得到回文数，最后就在一行中输出 Not found in 10 iterations.。

输入样例 1：
97152
输出样例 1：
97152 + 25179 = 122331
122331 + 133221 = 255552
255552 is a palindromic number.
输入样例 2：
196
输出样例 2：
196 + 691 = 887
887 + 788 = 1675
1675 + 5761 = 7436
7436 + 6347 = 13783
13783 + 38731 = 52514
52514 + 41525 = 94039
94039 + 93049 = 187088
187088 + 880781 = 1067869
1067869 + 9687601 = 10755470
10755470 + 07455701 = 18211171
Not found in 10 iterations.



#include <set>
#include <map>
#include <deque> 
#include <list>
#include <bitset>
#include <stack>
#include <queue>
#include <vector>
#include <cstring>
#include <algorithm>
#include <assert.h>

#include <iostream>
#include <cmath>
#include <ctime>
#include <cctype>
#include <cstdlib>
#include <iomanip>
using namespace std;

/*struct node{
	string school;
	int tws,ns;
};
int cmp(node a,node b)
{
	if(a.tws!=b.tws){
		return a.tws>b.tws;
	}
	else if(a.ns!=b.ns){
		return a.ns<b.ns;
	}
	else{
		return a.school<b.school;
	}
}*/

string Reverse(string a)
{
	reverse(a.begin(),a.end());
	return a;
}
string stringAdd(string a,string b)
{
	int flag=0;
	string word=a;
	for(int i=a.size()-1;i>=0;--i){
		int c=a[i]+-'0'+b[i]-'0'+flag;
		word[i]=c%10+'0';
		flag=c/10;
	}
	//word=Reverse(word);
	if(flag>0){
		word="1"+word;
	}
	//cout<<word<<endl;
	return word;
}

int main(int argc, char** argv) {
	string s,sum;
	int count=10;
	cin>>s;
	//cout<<Reverse(s)<<endl;
	if(s==Reverse(s)){
		cout<<s<<" is a palindromic number."<<endl;
		return 0;
	}
	while(count--){
		sum=stringAdd(s,Reverse(s));
		//cout<<sum<<endl;
		cout<<s<<" + "<<Reverse(s)<<" = "<<sum<<endl;
		if(sum==Reverse(sum)){
			cout<<sum<<" is a palindromic number.\n";
			return 0; 
		}
		s=sum;
	}
	cout<<"Not found in 10 iterations.\n";
	return 0;
}

