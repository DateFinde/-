地球人习惯使用十进制数，并且默认一个数字的每一位都是十进制的。而在 PAT 星人开挂的世界里，每个数字的每一位都是不同进制的，这种神奇的数字称为“PAT数”。
每个 PAT 星人都必须熟记各位数字的进制表，例如“……0527”就表示最低位是 7 进制数、第 2 位是 2 进制数、第 3 位是 5 进制数、第 4 位是 10 进制数，等等。
每一位的进制 d 或者是 0（表示十进制）、或者是 [2，9] 区间内的整数。理论上这个进制表应该包含无穷多位数字，但从实际应用出发，PAT 星人通常只需要记住前
20 位就够用了，以后各位默认为 10 进制。

在这样的数字系统中，即使是简单的加法运算也变得不简单。例如对应进制表“0527”，该如何计算“6203 + 415”呢？我们得首先计算最低位：3 + 5 = 8；因为最低位
是 7 进制的，所以我们得到 1 和 1 个进位。第 2 位是：0 + 1 + 1（进位）= 2；因为此位是 2 进制的，所以我们得到 0 和 1 个进位。第 3 位是：2 + 4 + 1
（进位）= 7；因为此位是 5 进制的，所以我们得到 2 和 1 个进位。第 4 位是：6 + 1（进位）= 7；因为此位是 10 进制的，所以我们就得到 7。最后我们得到：
6203 + 415 = 7201。

输入格式：
输入首先在第一行给出一个 N 位的进制表（0 < N ≤ 20），以回车结束。 随后两行，每行给出一个不超过 N 位的非负的 PAT 数。

输出格式：
在一行中输出两个 PAT 数之和。

输入样例：
30527
06203
415
输出样例：
7201



#include <set>
#include <map>
#include <deque> 
#include <list>
#include <bitset>
#include <stack>
#include <queue>
#include <vector>
#include <cstring>
#include <algorithm>
#include <assert.h>

#include <iostream>
#include <cmath>
#include <ctime>
#include <cctype>
#include <cstdlib>
#include <iomanip>
using namespace std;

/*struct node{
	string name;
	int gp;
	int gm;
	int gf;
	int g;
};
int cmp(node a,node b)
{
	if(a.g!=b.g){
		return a.g>b.g;
	}
	else if(a.g==b.g){
		return a.name<b.name;
	}
}*/

int main(int argc, char** argv) {
	string s1,s2,s;
	cin>>s>>s1>>s2;
	
	string result=s;
	string re1(s.length()-s1.length(),'0');
	s1=re1+s1;
	string re2(s.length()-s2.length(),'0');
	s2=re2+s2;
	
	
	int flag=0;
	for(int i=s.length()-1;i>=0;--i){
		int temp=s1[i]-'0'+s2[i]-'0';
		int number=s[i]=='0'?10:s[i]-'0';
		result[i]=(temp+flag)%number+'0';
		flag=(temp+flag)/number;
	}
	if(flag){
		result="1"+result;
	}
	//cout<<result<<endl;
	int spot=0;
	for(int i=0;i<result.length();++i){
		if(result[i]!='0'||spot==1){
			spot=1;
			cout<<result[i];
		}
	}
	if(spot==0){
		cout<<0;
	}
	return 0;
}
