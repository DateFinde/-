某城镇进行人口普查，得到了全体居民的生日。现请你写个程序，找出镇上最年长和最年轻的人。

这里确保每个输入的日期都是合法的，但不一定是合理的——假设已知镇上没有超过 200 岁的老人，
而今天是 2014 年 9 月 6 日，所以超过 200 岁的生日和未出生的生日都是不合理的，应该被过滤掉。

输入格式：
输入在第一行给出正整数 N，取值在(0,10^5]；随后 N 行，每行给出 1 个人的姓名（由不超过 5 个
英文字母组成的字符串）、以及按  yyyy/mm/dd（即年/月/日）格式给出的生日。题目保证最年长和最年轻的人没有并列。

输出格式：
在一行中顺序输出有效生日的个数、最年长人和最年轻人的姓名，其间以空格分隔。

输入样例：
5
John 2001/05/12
Tom 1814/09/06
Ann 2121/01/30
James 1814/09/05
Steve 1967/11/20
输出样例：
3 Tom John

#include <set>
#include <map>
#include <deque> 
#include <list>
#include <bitset>
#include <stack>
#include <queue>
#include <vector>
#include <cstring>
#include <algorithm>
#include <assert.h>

#include <iostream>
#include <cmath>
#include <ctime>
#include <cctype>
#include <cstdlib>
#include <iomanip>
using namespace std;

struct people{
	string name;
	int year;
	int month;
	int day;
}; 
int main(int argc, char** argv) {
	int n;
	cin>>n;
	
	string maxname,minname;
	int maxyear = 0, maxmonth = 0, maxday = 0, minyear = 9999, minmonth = 9999, minday = 9999;
	int count=0;
	for(int i=0;i<n;i++){
		struct people peo;
		cin>>peo.name;
		scanf("%d/%d/%d",&peo.year,&peo.month,&peo.day);
		if((peo.year<2014||(peo.year==2014&&peo.month<9)||(peo.year==2014&&peo.month==9&&peo.day<=6))&&
           (peo.year>1814||(peo.year==1814&&peo.month>9)||(peo.year==1814&&peo.month==9&&peo.day>=6))){
            ++count;
            if(peo.year>maxyear||(peo.year==maxyear&&peo.month>maxmonth)||(peo.year==maxyear&&peo.month==maxmonth&&peo.day>maxday)){
                maxyear = peo.year;
                maxmonth = peo.month;
                maxday = peo.day;
                maxname = peo.name;
            }
            if(peo.year < minyear || (peo.year == minyear && peo.month < minmonth) || (peo.year == minyear && peo.month == minmonth && peo.day < minday)) {
                minyear = peo.year;
                minmonth = peo.month;
                minday = peo.day;
                minname = peo.name;
            }
		}
	}
    cout << count;
    if (count != 0)
        cout << " " << minname << " " << maxname;
    
    return 0;
}
