本题要求将给定的 N 个正整数按非递增的顺序，填入“螺旋矩阵”。所谓“螺旋矩阵”，是指从左上角第 1 个格子开始，按顺时针螺旋方向填充。
要求矩阵的规模为 m 行 n 列，满足条件：m×n 等于 N；m≥n；且 m−n 取所有可能值中的最小值。

输入格式：
输入在第 1 行中给出一个正整数 N，第 2 行给出 N 个待填充的正整数。所有数字不超过 10^4，相邻数字以空格分隔。

输出格式：
输出螺旋矩阵。每行 n 个数字，共 m 行。相邻数字以 1 个空格分隔，行末不得有多余空格。

输入样例：
12
37 76 20 98 76 42 53 95 60 81 58 93
输出样例：
98 95 93
42 37 81
53 20 76
58 60 76


#include <set>
#include <map>
#include <deque> 
#include <list>
#include <bitset>
#include <stack>
#include <queue>
#include <vector>
#include <cstring>
#include <algorithm>
#include <assert.h>

#include <iostream>
#include <cmath>
#include <ctime>
#include <cctype>
#include <cstdlib>
#include <iomanip>
using namespace std;

int cmp(int a,int b)
{
	return a>b;
}
int search(int t)
{
	int s=sqrt(t);
	while(s>=1){
		if(t%s==0){
		    return s;	
		}
		s--;
	}
	return 1;
}
int main(int argc, char** argv) {
	int N;
	cin>>N;
	getchar();
	int m,n;
	n=search(N);
	m=N/n;
	//cout<<m<<" "<<n<<endl;
	
	vector<int> number(N);
	for(int i=0;i<N;++i){
		cin>>number[i];
	}
	sort(number.begin(),number.end(),cmp);
	//cout<<endl;
	
	int count=0;
	int result[m][n];
	int row=0,col=0;
	memset(result,0,N*sizeof(int));
	result[row][col]=number[count++]; 
	while(count<N){
		while(col+1<n&&!result[row][col+1]){
			result[row][++col]=number[count++];
		}
		while(row+1<m&&!result[row+1][col]){
			result[++row][col]=number[count++];
		}
		while(col-1>=0&&!result[row][col-1]){
			result[row][--col]=number[count++];
		}
		while(row-1>=0&&!result[row-1][col]){
			result[--row][col]=number[count++];
		}
	}
	for(int i=0;i<m;++i){
		for(int j=0;j<n;++j){
			if(j==0){
				cout<<result[i][j];
			}
			else{
				cout<<" "<<result[i][j];
			}
		}
		cout<<endl;
	}
    return 0;
}












